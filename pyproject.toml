[project]
name = "dtra"
version = "0.2.0"
description = ""
readme = "system_docs/IMPLEMENTATION_SUMMARY.md"
requires-python = ">=3.12"
dependencies = [
    "aiofiles>=24.1.0",
    "aiohttp>=3.10.0",
    "black>=24.0.0",
    "click>=8.1.7",
    "googletrans>=4.0.0rc1",
    "isort>=5.13.0",
    "langdetect>=1.0.9",
    "loguru>=0.7.0",
    "mypy>=1.8.0",
    "openai==1.86.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "pypdf2>=3.0.1",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
    "python-docx>=1.1.0",
    "rich>=13.0.0",
    "ruff>=0.6.0",
    "tenacity>=8.2.0",
    "tqdm>=4.66.0",
]

[[tool.uv.index]]
url = "https://pypi.org/simple"

[[tool.uv.index]]
url = "https://test.pypi.org/simple"
default = true


[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "coverage[toml]>=7.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
]

[project.scripts]
dtra = "translator.cli:cli"

[build-system]
requires = ["hatchling>=1.26"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/translator"]

[dependency-groups]
dev = [
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "pytest-mock>=3.14.1",
]

[tool.ruff]
line-length = 100  # Maximum line length for code formatting
target-version = "py312"  # Target Python version for compatibility

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors - Report style issues ✔️
    "W",   # pycodestyle warnings - Report style warnings ✔️
    "F",   # pyflakes - Report undefined names and other common errors ✔️
    "I",   # isort - Import sorting and organization ✔️ 🛠️
    "B",   # flake8-bugbear - Detect likely bugs and design problems ✔️
    "C4",  # flake8-comprehensions - Suggest better list/dict/set comprehensions ✔️ 🛠️
    "UP",  # pyupgrade - Suggest syntax upgrades for newer Python versions ✔️ 🛠️
    "D",   # pydocstyle - Docstring style checking ✔️
    "N",   # pep8-naming - Check naming conventions ✔️
    "S",   # flake8-bandit - Security testing ✔️
    "T20", # flake8-print - Detect print statements ✔️
    "PT",  # flake8-pytest-style - Pytest style checking ✔️
]
ignore = [
    "D100", # undocumented-public-module Missing docstring in public module ✔️
    "D104", # undocumented-public-package Missing docstring in public package ✔️
    "S101", # assert - Use of assert detected (allow for tests) ✔️
    "T201", # print - print found (allow for CLI output) ✔️
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"  # Use PEP 257 docstring conventions

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "D103"]  # Allow assert and missing docstrings in tests

[tool.mypy]
python_version = "3.12"  # Target Python version for type checking
strict = true  # Enable all strict type checking options
warn_return_any = true  # Warn when returning Any from function
warn_unused_configs = true  # Warn about unused mypy configuration options
disallow_untyped_defs = true  # Disallow defining functions without type annotations
show_error_codes = true  # Show error codes in output
namespace_packages = true  # Support namespace packages

[tool.pytest.ini_options]
minversion = "8.0"  # Minimum pytest version required
testpaths = ["tests"]  # Directory containing tests
python_files = ["test_*.py", "*_test.py"]  # Test file patterns
python_classes = ["Test*"]  # Test class patterns
python_functions = ["test_*"]  # Test function patterns
asyncio_mode = "auto"  # Automatically handle async tests
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "cursorgenerated: marks tests as generated by Cursor AI",
]
filterwarnings = [
    "ignore::DeprecationWarning",  # Ignore deprecation warnings
    "ignore::PendingDeprecationWarning",  # Ignore pending deprecation warnings
]

[tool.coverage.run]
source = ["src"]  # Source directories for coverage measurement
omit = [
    "*/tests/*",     # Exclude test files from coverage
    "*/__pycache__/*",  # Exclude cache files
    "*/venv/*",      # Exclude virtual environment
    "*/env/*",       # Exclude environment directories
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",  # Exclude lines marked with pragma
    "def __repr__",      # Exclude __repr__ methods
    "if self.debug:",    # Exclude debug code
    "if settings.DEBUG", # Exclude debug settings
    "raise AssertionError",  # Exclude assertion errors
    "raise NotImplementedError",  # Exclude not implemented errors
    "if 0:",            # Exclude unreachable code
    "if __name__ == .__main__.:",  # Exclude main blocks
    "class .*\\bProtocol\\):",     # Exclude protocol classes
    "@(abc\\.)?abstractmethod",    # Exclude abstract methods
]
